(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,s)=>{const n=s(475),o=s(27),{lightningChart:r,emptyLine:a,UIElementBuilders:i,UIBackgrounds:l,emptyFill:c,SolidLine:u,AxisTickStrategies:d,AxisScrollStrategies:m,UIOrigins:g,TimeFormattingFunctions:h,UIDraggingModes:S,MouseStyles:p,Themes:f}=n,{createProgressiveTraceGenerator:w}=o,y=window.location.search,x="true"===new URLSearchParams(y).get("full"),k=x?10:3,M=x?10:3,T=r().Dashboard({numberOfColumns:k,numberOfRows:M+1}).setSplitterStyle(new u({thickness:0})),I=T.createUIPanel({columnIndex:0,rowIndex:0,columnSpan:k}),A=x?24:64,C=T.engine.container.getBoundingClientRect().height;T.setRowHeight(0,M*A/(C-A));const b=[];for(let e=0;e<k;e+=1)for(let t=0;t<M;t+=1){const s=T.createChartXY({columnIndex:e,rowIndex:t+1}).setTitleFillStyle(c).setTitleMargin({top:0,bottom:0}).setPadding(0).setMouseInteractions(!1).setAutoCursor((e=>e.setTickMarkerXVisible(!1).setTickMarkerYVisible(!1).setAutoFitStrategy(void 0)));s.getDefaultAxisX().setTickStrategy(d.Empty).setMouseInteractions(!1).setScrollStrategy(m.progressive).setInterval({start:-6e4,end:0,stopAxisAfter:!1}).setStrokeStyle(a).setAnimationScroll(!1),s.getDefaultAxisY().setTickStrategy(d.Empty).setMouseInteractions(!1).setStrokeStyle(a).setAnimationScroll(!1),b.push(s)}I.addUIElement(i.TextBox.setBackground(l.None)).setText(k*M+" live channels (1 ms resolution) 1 minute history").setMouseInteractions(!1).setPosition({x:50,y:100}).setOrigin(g.CenterTop),x||I.addUIElement(i.TextBox).setText("Click here to show full 10x10 dashboard").setPosition({x:50,y:100}).setOrigin(g.CenterTop).setMargin(30).setDraggingMode(S.notDraggable).setMouseStyle(p.Point).onMouseClick((()=>{let e=window.location.href;e+=(e.split("?")[1]?"&":"?")+"full=true",window.location.href=e}));const E=b.map(((e,t)=>{const s=e.addLineSeries({dataPattern:{pattern:"ProgressiveX",regularProgressiveStep:!0},automaticColorIndex:t}).setName(`Channel ${t+1}`).setStrokeStyle((e=>e.setThickness(1))).setDataCleaning({minDataPointCount:1e3}).setCursorResultTableFormatter(((e,t,n,o,r)=>e.addRow(s.getName()).addRow(h.hhmmssmmm(r.x-window.performance.now())).addRow("Value: ",s.axisY.formatValue(r.y))));return s}));Promise.all(new Array(10).fill(0).map((e=>w().setNumberOfPoints(6e4).generate().toPromise().then((e=>{const t=10+2e3*Math.random(),s=.03*t,n=e.reduce(((e,t)=>Math.min(e,t.y)),Number.MAX_SAFE_INTEGER),o=(e.reduce(((e,t)=>Math.max(e,t.y)),-Number.MAX_SAFE_INTEGER)-n)/2,r=n+o;return e.map((e=>t+(e.y-r)/o*s))})).then((e=>(e.push(...e.slice().reverse()),e)))))).then((e=>{const t=e[0].length,s=E.map((t=>({series:t,dataSet:e[Math.round(Math.random()*(e.length-1))]}))),n=[];s.forEach((e=>{const t=n.find((t=>t.dataSet===e.dataSet));t?t.seriesList.push(e.series):n.push({dataSet:e.dataSet,seriesList:[e.series]})}));const o=n.length;let r=-3e4;const a=()=>{const e=window.performance.now(),s=n.map((e=>[]));for(let a=r+1;a<e;a+=1){let e=a%t;for(;e<0;)e+=t;for(let t=0;t<o;t+=1){const o=n[t].dataSet[e];s[t].push({x:a,y:o})}r=a}n.forEach(((e,t)=>{const n=s[t];e.seriesList.forEach((e=>{e.add(n)}))})),requestAnimationFrame(a)};a()}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);